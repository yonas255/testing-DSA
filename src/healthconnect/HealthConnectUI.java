/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package healthconnect;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author yonas
 */
public class HealthConnectUI extends javax.swing.JFrame {// start class
    //create a obeject the acces the Methods calss
Methods m = new Methods ();
    public HealthConnectUI() {
        initComponents();
        
      
        // Disable the Jpanel  TextArea and the fields as we need 
        
        WeightMeasurement.setEditable(false);
        jTabbedPane1.setEnabledAt(1, false);
        jTabbedPane1.setEnabledAt(2, false);
        jTabbedPane1.setEnabledAt(3, false);
        Display.setEnabled(false);
        jButton4.setEnabled(false);
        DisplayInfo.setEnabled(false);
        SuggestExercise.setEnabled(false);
        NutiritionSuggest.setEnabled(false);
        
          vegan.setSelectedItem(null);
          omnivore.setSelectedItem(null);
          Allergies.setSelectedItem(null);
          vegetarian.setSelectedItem(null);
          vegan.setSelectedItem(null);
          Allergies.setSelectedItem(null);
          omnivore.setSelectedItem(null);
          Gender.setSelectedItem(null);
          ActivityLevel.setSelectedItem(null);
          omnivore.setSelectedItem(null);
          fItness.setSelectedItem(null);
          FitnessLevel.setSelectedItem(null);
          Freetime.setSelectedItem(null);
          
          
          
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        UserId = new javax.swing.JTextField();
        Age = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        BMICal = new javax.swing.JTextField();
        WeightMeasurement = new javax.swing.JTextField();
        Height = new javax.swing.JTextField();
        Weight = new javax.swing.JTextField();
        Calculate = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Search = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        Gender = new javax.swing.JComboBox<>();
        ActivityLevel = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        Allergies = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        vegetarian = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        vegan = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        omnivore = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        NutiritionSuggest = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Freetime = new javax.swing.JComboBox<>();
        FitnessLevel = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        SuggestExercise = new javax.swing.JTextArea();
        apply = new javax.swing.JButton();
        fItness = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        DisplayInfo = new javax.swing.JTextArea();
        Display = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setForeground(new java.awt.Color(255, 204, 204));
        setMaximumSize(new java.awt.Dimension(2147, 83647));
        setPreferredSize(new java.awt.Dimension(858, 703));

        jTabbedPane1.setBackground(new java.awt.Color(255, 204, 204));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(893, 39));
        jTabbedPane1.setOpaque(true);
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(117, 559));

        jPanel2.setLayout(null);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel5.setText("User Id");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(60, 140, 82, 37);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel6.setText("Gender");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(60, 190, 51, 21);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel7.setText("Age ");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(60, 230, 32, 21);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel8.setText("Activity Level");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(380, 240, 94, 21);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel9.setText("Height");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(390, 140, 47, 21);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel10.setText("Weight");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(390, 190, 51, 21);

        UserId.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        UserId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserIdActionPerformed(evt);
            }
        });
        UserId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UserIdKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                UserIdKeyTyped(evt);
            }
        });
        jPanel2.add(UserId);
        UserId.setBounds(140, 140, 136, 29);

        Age.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        Age.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AgeKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AgeKeyTyped(evt);
            }
        });
        jPanel2.add(Age);
        Age.setBounds(140, 240, 136, 29);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel11.setText("Body Mass Index");
        jPanel2.add(jLabel11);
        jLabel11.setBounds(150, 390, 119, 21);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel12.setText("BMI Catagory");
        jPanel2.add(jLabel12);
        jLabel12.setBounds(150, 430, 96, 21);

        BMICal.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jPanel2.add(BMICal);
        BMICal.setBounds(300, 380, 169, 29);

        WeightMeasurement.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jPanel2.add(WeightMeasurement);
        WeightMeasurement.setBounds(300, 430, 169, 29);

        Height.setFont(new java.awt.Font("Segoe UI", 3, 15)); // NOI18N
        Height.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                HeightKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HeightKeyTyped(evt);
            }
        });
        jPanel2.add(Height);
        Height.setBounds(490, 130, 158, 29);

        Weight.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        Weight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeightActionPerformed(evt);
            }
        });
        Weight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                WeightKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                WeightKeyTyped(evt);
            }
        });
        jPanel2.add(Weight);
        Weight.setBounds(490, 180, 158, 29);

        Calculate.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Calculate.setText("Calculate");
        Calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateActionPerformed(evt);
            }
        });
        jPanel2.add(Calculate);
        Calculate.setBounds(630, 300, 150, 55);

        Add.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Add.setText("Add/Update");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });
        jPanel2.add(Add);
        Add.setBounds(208, 538, 167, 60);

        Delete.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        jPanel2.add(Delete);
        Delete.setBounds(434, 538, 148, 60);

        Search.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });
        jPanel2.add(Search);
        Search.setBounds(6, 538, 144, 60);

        jButton10.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton10.setText("Clear");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton10);
        jButton10.setBounds(640, 540, 161, 60);

        Gender.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        Gender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));
        jPanel2.add(Gender);
        Gender.setBounds(140, 190, 136, 29);

        ActivityLevel.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        ActivityLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "High", "Medium", "Low" }));
        jPanel2.add(ActivityLevel);
        ActivityLevel.setBounds(490, 240, 158, 29);

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Yonasimges/OIP.jpg"))); // NOI18N
        jPanel2.add(jLabel15);
        jLabel15.setBounds(260, 10, 260, 90);

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Yonasimges/img3.jpg"))); // NOI18N
        jLabel16.setAutoscrolls(true);
        jPanel2.add(jLabel16);
        jLabel16.setBounds(0, 0, 860, 600);

        jTabbedPane1.addTab("BMI Calculator", jPanel2);

        jPanel3.setLayout(null);

        Allergies.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        Allergies.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        jPanel3.add(Allergies);
        Allergies.setBounds(200, 50, 130, 30);

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel18.setText("Allergies");
        jPanel3.add(jLabel18);
        jLabel18.setBounds(97, 50, 80, 25);

        vegetarian.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        vegetarian.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        vegetarian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vegetarianActionPerformed(evt);
            }
        });
        jPanel3.add(vegetarian);
        vegetarian.setBounds(200, 110, 130, 29);

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel19.setText("Vegetarian");
        jPanel3.add(jLabel19);
        jLabel19.setBounds(90, 110, 100, 25);

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel20.setText("vegan");
        jPanel3.add(jLabel20);
        jLabel20.setBounds(500, 50, 90, 25);

        vegan.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        vegan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        jPanel3.add(vegan);
        vegan.setBounds(620, 50, 130, 29);

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel21.setText("Omnivore");
        jPanel3.add(jLabel21);
        jLabel21.setBounds(500, 90, 95, 44);

        omnivore.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        omnivore.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        jPanel3.add(omnivore);
        omnivore.setBounds(620, 100, 130, 29);

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setText("Display Suggestion");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1);
        jButton1.setBounds(210, 540, 390, 50);

        NutiritionSuggest.setColumns(20);
        NutiritionSuggest.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        NutiritionSuggest.setRows(5);
        jScrollPane1.setViewportView(NutiritionSuggest);

        jPanel3.add(jScrollPane1);
        jScrollPane1.setBounds(30, 340, 781, 190);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Yonasimges/img6.jpg"))); // NOI18N
        jPanel3.add(jLabel14);
        jLabel14.setBounds(1, -3, 860, 640);

        jTabbedPane1.addTab("Nutrition Suggest", jPanel3);

        jPanel4.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel1.setText("Free Time");
        jPanel4.add(jLabel1);
        jLabel1.setBounds(290, 260, 74, 22);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel2.setText("Fitness Goal");
        jPanel4.add(jLabel2);
        jLabel2.setBounds(280, 180, 95, 22);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel3.setText("Current Fitness Level:");
        jPanel4.add(jLabel3);
        jLabel3.setBounds(210, 220, 161, 22);

        Freetime.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        Freetime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "morning", "daytime", "evening" }));
        jPanel4.add(Freetime);
        Freetime.setBounds(380, 260, 190, 29);

        FitnessLevel.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        FitnessLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "beginner", "intermediate", "advanced", "not sure" }));
        jPanel4.add(FitnessLevel);
        FitnessLevel.setBounds(380, 220, 186, 29);

        SuggestExercise.setBackground(new java.awt.Color(51, 51, 51));
        SuggestExercise.setColumns(20);
        SuggestExercise.setFont(new java.awt.Font("Segoe UI", 3, 17)); // NOI18N
        SuggestExercise.setRows(5);
        jScrollPane2.setViewportView(SuggestExercise);

        jPanel4.add(jScrollPane2);
        jScrollPane2.setBounds(44, 310, 750, 203);

        apply.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        apply.setText("Display Suggestion");
        apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyActionPerformed(evt);
            }
        });
        jPanel4.add(apply);
        apply.setBounds(230, 520, 402, 50);

        fItness.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        fItness.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "weight loss", "muscle building", "improving flexibility", "overall well-being" }));
        jPanel4.add(fItness);
        fItness.setBounds(380, 180, 186, 29);

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Yonasimges/R.jpg"))); // NOI18N
        jPanel4.add(jLabel13);
        jLabel13.setBounds(4, -1, 860, 650);

        jTabbedPane1.addTab("Exersise Suggest", jPanel4);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setMaximumSize(new java.awt.Dimension(3967, 32767));
        jPanel5.setPreferredSize(new java.awt.Dimension(116, 515));
        jPanel5.setLayout(null);

        DisplayInfo.setEditable(false);
        DisplayInfo.setBackground(new java.awt.Color(51, 51, 51));
        DisplayInfo.setColumns(20);
        DisplayInfo.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        DisplayInfo.setLineWrap(true);
        DisplayInfo.setRows(5);
        DisplayInfo.setWrapStyleWord(true);
        jScrollPane3.setViewportView(DisplayInfo);

        jPanel5.add(jScrollPane3);
        jScrollPane3.setBounds(0, 0, 860, 230);

        Display.setFont(new java.awt.Font("Calisto MT", 1, 18)); // NOI18N
        Display.setText("Display History");
        Display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayActionPerformed(evt);
            }
        });
        jPanel5.add(Display);
        Display.setBounds(580, 240, 240, 50);

        jButton5.setFont(new java.awt.Font("Calisto MT", 1, 18)); // NOI18N
        jButton5.setText("Print History To File");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton5);
        jButton5.setBounds(70, 510, 270, 60);

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton2.setText("Read History From Afile");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton2);
        jButton2.setBounds(550, 510, 270, 60);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Yonasimges/maxresdefault.jpg"))); // NOI18N
        jPanel5.add(jLabel4);
        jLabel4.setBounds(0, 0, 860, 600);

        jTabbedPane1.addTab("View", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 866, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayActionPerformed

        DisplayInfo.setText("");
        // Calling the method
        updateDisplay();
    }//GEN-LAST:event_DisplayActionPerformed

    private void applyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyActionPerformed
        try {
            // Check if JComboBoxes are empty
            if (Freetime.getSelectedItem() == null || FitnessLevel.getSelectedItem() == null || fItness.getSelectedItem() == null) {
                // Display an error message let the user know fields need to be filled
                JOptionPane.showMessageDialog(this, "Please fill in all the fields before displaying suggestions.", "Error", JOptionPane.ERROR_MESSAGE);
                return; 
            }

            double bmi = getBMIFromUI();
            String freeTime = Freetime.getSelectedItem().toString();
            String activityLevel = FitnessLevel.getSelectedItem().toString();
            String fitnessGoals = fItness.getSelectedItem().toString();

            // Get exercise suggestions
            List<String> exerciseSuggestions = m.provideExerciseSuggestions(bmi, freeTime, activityLevel, fitnessGoals);

            // Display suggestions in the SuggestExercise TextArea
            StringBuilder suggestionsText = new StringBuilder();
            for (String suggestion : exerciseSuggestions) {
                suggestionsText.append(suggestion).append("\n");
            }
            SuggestExercise.setText(suggestionsText.toString());
        } catch (NumberFormatException | NullPointerException ex) {
            // Handle the erro or show the error
            
        }
       
        enableOtherTabs(true); 
    }//GEN-LAST:event_applyActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            Nutrition userNutrition = getNutritionFromUI();
            double bmi = getBMIFromUI();

            // Check if any of the nutrition fields are empty
            if (userNutrition == null) {
                JOptionPane.showMessageDialog(this, "Please fill in all the nutrition fields before displaying suggestions.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Exit the method if nutrition fields are not filled
            }

            // Call the method to get nutrition suggestions
            List<String> suggestions = m.provideNutritionSuggestions(bmi, userNutrition);

            NutiritionSuggest.setText("Based on your BMI and Nutrition preference:\n");

            // Display the suggestions in the NutritionSuggest TextArea
            NutiritionSuggest.setText("Based on your BMI and Nutrition preference:\n" + String.join("\n", suggestions));
        } catch (NumberFormatException | NullPointerException ex) { // Handle the exception, e.g., show an error message
        }
        jTabbedPane1.setEnabledAt(2, true);
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        clearInputFields();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // Get the user ID from the UserID field
        String userIdToSearch = UserId.getText().trim();

        // Check if the user ID is empty
        if (userIdToSearch.isEmpty()) {
            // Display an error message or handle the validation error
            JOptionPane.showMessageDialog(this, "Please enter a User ID to search.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Call the searchAndDisplayUser method in the Methods class
        foundUser = m.searchAndDisplayUser(userIdToSearch);

        // logic based on the found user 
        if (foundUser != null) {
            // Update healthconnectUI fields with the information from the found user
            displayUserInformation(foundUser);
        } else {
            // Display a message indicating that the user was not found
            JOptionPane.showMessageDialog(this, "User not found. Please add new user thank you!", "Search Result", JOptionPane.INFORMATION_MESSAGE);
        }
        }
        // Method to display user information in UI fields
        private void displayUserInformation(HealthData userHealthData) {
            UserId.setText(userHealthData.getHealth().getUserId());
            Gender.setSelectedItem(userHealthData.getHealth().getGender());
            Age.setText(String.valueOf(userHealthData.getHealth().getAge()));
            Height.setText(String.valueOf(userHealthData.getHealth().getHeight()));
            Weight.setText(String.valueOf(userHealthData.getHealth().getWeight()));
            ActivityLevel.setSelectedItem(userHealthData.getHealth().getActivityLevel());
            // Call the calculateBMI method in the Methods class
            double bmi = m.calculateBMI(userHealthData.getHealth());

            // Display BMI in the BMICal field
            BMICal.setText(String.format("%.2f", bmi));

            // Call the getWeightMeasurement method in the Methods class
            String weightMeasurement = m.getWeightMeasurement(bmi);

            // Display WeightMeasurement in the corresponding field
            WeightMeasurement.setText(weightMeasurement);
    }//GEN-LAST:event_SearchActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // Get the user ID from the UserID field
        String userIdToDelete = UserId.getText().trim();

        // Check if the user ID is empty
        if (userIdToDelete.isEmpty()) {
            // Display an error message or handle the validation error
            JOptionPane.showMessageDialog(this, "Please enter a User ID to delete.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Call the deleteUserById method on the instance
        m.deleteUserById(userIdToDelete);
         JOptionPane.showMessageDialog(this, "User Has Been delted successfully.", "UnSuccess", JOptionPane.INFORMATION_MESSAGE);
        // Clear the UI fields
        clearInputFields();
    }//GEN-LAST:event_DeleteActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // Validate that the fields are not empty
        if (UserId.getText().trim().isEmpty() || Gender.getSelectedItem() == null ||
            Age.getText().trim().isEmpty() || Height.getText().trim().isEmpty() ||BMICal.getText().trim().isEmpty() ||
           WeightMeasurement.getText().trim().isEmpty() || Weight.getText().trim().isEmpty() || ActivityLevel.getSelectedItem() == null) {

            // Display an error message or handle the validation error appropriately
            JOptionPane.showMessageDialog(this, "Please fill in all the fields or check if you calculated The BMI", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if validation fails
        }

        // Get values from UI components
        String userId = UserId.getText();
        String gender = (String) Gender.getSelectedItem();
        int age = Integer.parseInt(Age.getText());
        double height = Double.parseDouble(Height.getText());
        double weight = Double.parseDouble(Weight.getText());
        String activityLevel = (String) ActivityLevel.getSelectedItem();

        // Create Health, Nutrition, and Exercise objects
        Health healthData = new Health(userId, gender, age, height, weight, activityLevel);
        Nutrition nutritionData = new Nutrition(userId, gender, age, height, weight, activityLevel, "bmiValue", true, true, true, true);
        Exercise exerciseData = new Exercise(userId, gender, age, weight, height, "Evening", "Intermediate", "Weight Loss");
        // Create a HealthData object
        HealthData userHealthData = new HealthData(healthData, nutritionData, exerciseData);

        // Call the addOrUpdateUser method in the Methods class
        m.addOrUpdateUser(userHealthData);

       

        clearInputFields();
        // Enable other tabs
        
        
        jTabbedPane1.setEnabledAt(1, true);

        // enable the Nutrition tab
   

    }//GEN-LAST:event_AddActionPerformed

    private void CalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculateActionPerformed

        // Validate that the fields are not empty
        if (Gender.getSelectedItem() == null || Age.getText().trim().isEmpty() || Height.getText().trim().isEmpty()
            || Weight.getText().trim().isEmpty() || ActivityLevel.getSelectedItem() == null) {
            // Display an error message 
            JOptionPane.showMessageDialog(this, "Please fill in all the fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if validation fails
        }
        // Get values from UI components
        String userId = UserId.getText();
        String gender = (String) Gender.getSelectedItem();
        int age = Integer.parseInt(Age.getText());
        double height = Double.parseDouble(Height.getText());
        double weight = Double.parseDouble(Weight.getText());
        String activityLevel = (String) ActivityLevel.getSelectedItem();

        // Call the calculateBMI method in the Methods class
        double bmi = m.calculateBMI(userId, gender, age, height, weight, activityLevel);

        // Display BMI in the BMICal field
        BMICal.setText(String.format("%.2f", bmi));

        // Call the getWeightMeasurement method in the Methods class
        String weightMeasurement = m.getWeightMeasurement(bmi);

        // Display WeightMeasurement in the corresponding field
        WeightMeasurement.setText(weightMeasurement);

    }                                         

        private void enableOtherTabs(boolean enable) {
            // Enable/Disable tabs based on the result
            for (int i = 1; i < jTabbedPane1.getTabCount(); i++) {
                jTabbedPane1.setEnabledAt(i, enable);
            }
            // Enable buttons in the Nutrition and Exercise tabs
            Display.setEnabled(enable);  // Enable Nutrition button
            jButton4.setEnabled(enable);  // Enable Exercise button
    }//GEN-LAST:event_CalculateActionPerformed

    private void WeightKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WeightKeyTyped
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {

            evt.consume();
        }// validation to prevent errors this will intake just numbers
    }//GEN-LAST:event_WeightKeyTyped

    private void WeightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WeightKeyPressed
        int lengthPIN =Weight.getText().length();
        if (lengthPIN == 3) {

            Weight.setText("");

            JOptionPane.showMessageDialog(null,"You cannot enter more than 3 digits");
        } // validation to prevent errors this will intake just 3 numbers
    }//GEN-LAST:event_WeightKeyPressed

    private void WeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WeightActionPerformed

    private void HeightKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HeightKeyTyped
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {

            evt.consume();

        }// validation to prevent errors this will intake just numbers
    }//GEN-LAST:event_HeightKeyTyped

    private void HeightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HeightKeyPressed
        int lengthPIN =Height.getText().length();
        if (lengthPIN == 3) {

            Height.setText("");

            JOptionPane.showMessageDialog(null,"please enter 3 digits only ");
        }// validation to prevent errors this will intake just  3 digit 
    }//GEN-LAST:event_HeightKeyPressed

    private void AgeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AgeKeyTyped
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {

            evt.consume();

        }// validation to prevent errors this will intake just numbers
    }//GEN-LAST:event_AgeKeyTyped

    private void AgeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AgeKeyPressed
        int lengthPIN =Age.getText().length();
        if (lengthPIN == 3) {

            Age.setText("");

            JOptionPane.showMessageDialog(null,"You cannot enter more than 3 digits");
        }// validation to prevent errors this will intake just 3 digit numbers
    }//GEN-LAST:event_AgeKeyPressed

    private void UserIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UserIdKeyTyped
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {

            evt.consume();

        }// validation to prevent errors this will intake just numbers
    }//GEN-LAST:event_UserIdKeyTyped

    private void UserIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UserIdKeyPressed
        int lengthPIN =UserId.getText().length();
        if (lengthPIN == 3) {

            UserId.setText("");

            JOptionPane.showMessageDialog(null,"You cannot enter more than 3 digits");
        }// validation to prevent errors this will intake 3 digit numbers
    }//GEN-LAST:event_UserIdKeyPressed

    private void UserIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UserIdActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
      
   
        m.WriteToFile(DisplayInfo);

        // Display success message
        JOptionPane.showMessageDialog(this, "File printed successfully!");

        // Clear the JTextArea
        DisplayInfo.setText("");
    
    }//GEN-LAST:event_jButton5ActionPerformed

    private void vegetarianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vegetarianActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vegetarianActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       m.readFromFileAndDisplay(DisplayInfo);
    }//GEN-LAST:event_jButton2ActionPerformed
  private void updateDisplay() {
    // Clear existing content in displayInfo JTextArea
    DisplayInfo.setText("");

    // To  displayInfo JTextArea
    for (HealthData userHealthData : Methods.getUserHealthDataList()) {
        DisplayInfo.append("User ID: " + userHealthData.getHealth().getUserId() + "\n");
        DisplayInfo.append("Gender: " + userHealthData.getHealth().getGender() + "\n");
        DisplayInfo.append("Age: " + userHealthData.getHealth().getAge() + "\n");
        DisplayInfo.append("Height: " + userHealthData.getHealth().getHeight() + "\n");
        DisplayInfo.append("Weight: " + userHealthData.getHealth().getWeight() + "\n");
        DisplayInfo.append("Activity Level: " + userHealthData.getHealth().getActivityLevel() + "\n");
        DisplayInfo.append("Nutrition Info:\n");
        DisplayInfo.append("   Vegetarian: " + userHealthData.getNutrition().isVegetarian() + "\n");
        DisplayInfo.append("   Vegan: " + userHealthData.getNutrition().isVegan() + "\n");
        DisplayInfo.append("   Allergies: " + userHealthData.getNutrition().isAllergies() + "\n");
        DisplayInfo.append("   Omnivore: " + userHealthData.getNutrition().isOmnivore() + "\n");
        DisplayInfo.append("Exercise Info:\n");
        DisplayInfo.append("   Free Time: " + userHealthData.getExercise().getFreeTime() + "\n");
        DisplayInfo.append("   Current Fitness Level: " + userHealthData.getExercise().getCurrenFitnessLevel() + "\n");
        DisplayInfo.append("   Fitness Goals: " + userHealthData.getExercise().getFitnessGoals() + "\n");
        DisplayInfo.append("----------------------\n"); // Separator between users
    }
}
private void clearInputFields() {
    // Clear all input fields
    UserId.setText("");
    Gender.setSelectedItem(null);
    Age.setText("");
    Height.setText("");
    Weight.setText("");
    ActivityLevel.setSelectedItem(null);
    BMICal.setText("");
    WeightMeasurement.setText("");

    // Disable other tabs
    enableOtherTabs(false);
}  private HealthData foundUser;  // This method help us to convert string to boolean based on the we have logic
private boolean convertToBoolean(String selectedItem) {
    // check if the chosen is "Yes" or "No"
    return selectedItem != null && selectedItem.equalsIgnoreCase("Yes");
}

private double getBMIFromUI() {
    String bmiText = BMICal.getText().trim();  // Replace with actual field name

    // Check if the text is empty before parsing
    if (bmiText.isEmpty()) {
        return 0.0;  // Return a default value 
    }

    try {
        return Double.parseDouble(bmiText);
    } catch (NumberFormatException e) {
        return 0.0;  // Return a default value 
    }
}

private Nutrition getNutritionFromUI() {
    try {
        double bmi = getBMIFromUI();
        
        // cheack JComboBoxes are properly initialized
        if (vegetarian == null || vegan == null || Allergies == null || omnivore == null) {
            JOptionPane.showMessageDialog(this, "Error: JComboBoxes not properly initialized.", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        // Get selected items from JComboBoxes
        String vegetarianSelectedItem = (vegetarian.getSelectedItem() != null) ? vegetarian.getSelectedItem().toString() : "";
        String veganSelectedItem = (vegan.getSelectedItem() != null) ? vegan.getSelectedItem().toString() : "";
        String allergiesSelectedItem = (Allergies.getSelectedItem() != null) ? Allergies.getSelectedItem().toString() : "";
        String omnivoreSelectedItem = (omnivore.getSelectedItem() != null) ? omnivore.getSelectedItem().toString() : "";

        // Check if any fields are empty
        if (vegetarianSelectedItem.isEmpty() || veganSelectedItem.isEmpty()
                || allergiesSelectedItem.isEmpty() || omnivoreSelectedItem.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all the nutrition fields before displaying suggestions.", "Error", JOptionPane.ERROR_MESSAGE);
            return null;  // Return null to indicate a problem
        }

        //  will Convert the selected value to boolean values based on the logic
        boolean vegetarian = convertToBoolean(vegetarianSelectedItem);
        boolean vegan = convertToBoolean(veganSelectedItem);
        boolean allergies = convertToBoolean(allergiesSelectedItem);
        boolean omnivore = convertToBoolean(omnivoreSelectedItem);

        // this line will replace with actual values when the user input
        return new Nutrition(
                "userId", "gender", 25, 170.0, 65.0, "activityLevel",
                String.valueOf(bmi),
                vegetarian,
                vegan,
                allergies,
                omnivore
        );
    } catch (NumberFormatException | NullPointerException ex) { // Handle the error toshow an error message
        return null;  
    }
    
}
 private void printToFile() {
        // call writefile method from methods class
        m.WriteToFile(DisplayInfo);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HealthConnectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HealthConnectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HealthConnectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HealthConnectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HealthConnectUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ActivityLevel;
    private javax.swing.JButton Add;
    private javax.swing.JTextField Age;
    private javax.swing.JComboBox<String> Allergies;
    private javax.swing.JTextField BMICal;
    private javax.swing.JButton Calculate;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Display;
    public javax.swing.JTextArea DisplayInfo;
    private javax.swing.JComboBox<String> FitnessLevel;
    private javax.swing.JComboBox<String> Freetime;
    private javax.swing.JComboBox<String> Gender;
    private javax.swing.JTextField Height;
    private javax.swing.JTextArea NutiritionSuggest;
    private javax.swing.JButton Search;
    private javax.swing.JTextArea SuggestExercise;
    private javax.swing.JTextField UserId;
    private javax.swing.JTextField Weight;
    private javax.swing.JTextField WeightMeasurement;
    private javax.swing.JButton apply;
    private javax.swing.JComboBox<String> fItness;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private static javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private static javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox<String> omnivore;
    private javax.swing.JComboBox<String> vegan;
    private javax.swing.JComboBox<String> vegetarian;
    // End of variables declaration//GEN-END:variables

}
